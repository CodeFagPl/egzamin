#SELECT
The SELECT DISTINCT statement is used to return only distinct (different) values.

SELECT COUNT(DISTINCT Country) FROM Customers; - liczy różne wartości



#WHERE
SELECT * FROM Customers
WHERE Country = 'Mexico'; 



#AND OR NOT
SELECT column1, column2, ...
FROM table_name
WHERE condition1 AND condition2 AND condition3 ...; 

SELECT column1, column2, ...
FROM table_name
WHERE condition1 OR condition2 OR condition3 ...; 

SELECT column1, column2, ...
FROM table_name
WHERE NOT condition; SELECT column1, column2, ...
FROM table_name
WHERE NOT condition; 



#ORDER BY
SELECT column1, column2, ...
FROM table_name
ORDER BY column1, column2, ... ASC|DESC; 

SELECT * FROM Customers
ORDER BY Country ASC, CustomerName DESC;



#INSERT INTO
INSERT INTO table_name (column1, column2, column3, ...)
VALUES (value1, value2, value3, ...);



#UPDATE
UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition; 



#DELETE
DELETE FROM table_name WHERE condition;



#LIMIT
SELECT column_name(s)
FROM table_name
WHERE condition
LIMIT number;



#MIN() MAX()SELECT COUNT(column_name)
FROM table_name
WHERE condition; 
SELECT MIN(column_name)
FROM table_name
WHERE condition; 

SELECT MAX(column_name)
FROM table_name
WHERE condition; 
SELECT COUNT(column_name)
FROM table_name
WHERE condition; 


#COUNT() AVG() SUM()
SELECT COUNT(column_name)
FROM table_name
WHERE condition; 

SELECT AVG(column_name)
FROM table_name
WHERE condition; 

SELECT SUM(column_name)
FROM table_name
WHERE condition; 



#LIKE
SELECT column1, column2, ...
FROM table_name
WHERE columnN LIKE pattern; 

The following SQL statement selects all customers with a CustomerName starting with "a":
SELECT * FROM Customers
WHERE CustomerName LIKE 'a%'; 

The following SQL statement selects all customers with a CustomerName ending with "a":
SELECT * FROM Customers
WHERE CustomerName LIKE '%a';

The following SQL statement selects all customers with a CustomerName that have "or" in any position:
SELECT * FROM Customers
WHERE CustomerName LIKE '%or%';

The following SQL statement selects all customers with a CustomerName that have "r" in the second position:
SELECT * FROM Customers
WHERE CustomerName LIKE '_r%';

The following SQL statement selects all customers with a CustomerName that starts with "a" and are at least 3 characters in length:
SELECT * FROM Customers
WHERE CustomerName LIKE 'a__%'; 

The following SQL statement selects all customers with a ContactName that starts with "a" and ends with "o":
SELECT * FROM Customers
WHERE ContactName LIKE 'a%o'; 

The following SQL statement selects all customers with a CustomerName that does NOT start with "a":
SELECT * FROM Customers
WHERE CustomerName NOT LIKE 'a%';



#IN
The IN operator allows you to specify multiple values in a WHERE clause.
The IN operator is a shorthand for multiple OR conditions.

SELECT column_name(s)
FROM table_name
WHERE column_name IN (value1, value2, ...); 
The following SQL statement selects all customers that are located in "Germany", "France" or "UK":
SELECT * FROM Customers
WHERE Country IN ('Germany', 'France', 'UK');

SELECT column_name(s)
FROM table_name
WHERE column_name IN (SELECT STATEMENT); 
The following SQL statement selects all customers that are from the same countries as the suppliers:
SELECT * FROM Customers
WHERE Country IN (SELECT Country FROM Suppliers);



#BETWEEN
The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.
SELECT column_name(s)
FROM table_name
WHERE column_name BETWEEN value1 AND value2; 

The following SQL statement selects all products with a ProductName between "Carnarvon Tigers" and "Mozzarella di Giovanni":
SELECT * FROM Products
WHERE ProductName BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'
ORDER BY ProductName;

The following SQL statement selects all orders with an OrderDate between '01-July-1996' and '31-July-1996':
SELECT * FROM Orders WHERE OrderDate BETWEEN '1996-07-01' AND '1996-07-31';



#ALIASES
The following SQL statement creates an alias named "Address" that combine four columns (Address, PostalCode, City and Country):
SELECT CustomerName, CONCAT_WS(', ', Address, PostalCode, City, Country) AS Address
FROM Customers; 



#JOIN
INNER JOIN: Returns records that have matching values in both tables 
LEFT JOIN: Returns all records from the left table, and the matched records from the right table RIGHT JOIN: Returns all records from the right table, and the matched records from the left table CROSS JOIN: Returns all records from both tables 

SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate
FROM Orders
INNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID;



#UNION 
The UNION operator is used to combine the result-set of two or more SELECT statements.
Every SELECT statement within UNION must have the same number of columns 
The columns must also have similar data types 
The columns in every SELECT statement must also be in the same order 

SELECT column_name(s) FROM table1
UNION
SELECT column_name(s) FROM table2; 

The UNION operator selects only distinct values by default. To allow duplicate values, use UNION ALL:
SELECT column_name(s) FROM table1
UNION ALL
SELECT column_name(s) FROM table2; 



#GROUP BY
The GROUP BY statement groups rows that have the same values into summary rows, like "find the number of customers in each country".
SELECT column_name(s)
FROM table_name
WHERE condition
GROUP BY column_name(s)
ORDER BY column_name(s); 



#HAVING
SELECT column_name(s)
FROM table_name
WHERE condition
GROUP BY column_name(s)
HAVING condition
ORDER BY column_name(s);

The following SQL statement lists the number of customers in each country. Only include countries with more than 5 customers:
SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country
HAVING COUNT(CustomerID) > 5;

The following SQL statement lists if the employees "Davolio" or "Fuller" have registered more than 25 orders:
SELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders
FROM Orders
INNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID
WHERE LastName = 'Davolio' OR LastName = 'Fuller'
GROUP BY LastName
HAVING COUNT(Orders.OrderID) > 25;



EXISTS
The EXISTS operator is used to test for the existence of any record in a subquery.
SELECT column_name(s)
FROM table_name
WHERE EXISTS
(SELECT column_name FROM table_name WHERE condition); 
The following SQL statement returns TRUE and lists the suppliers with a product price less than 20:
SELECT SupplierName
FROM Suppliers
WHERE EXISTS (SELECT ProductName FROM Products WHERE Products.SupplierID = Suppliers.supplierID AND Price < 20);



ALL ANY
The ANY operator:
      returns a boolean value as a result 
      returns TRUE if ANY of the subquery values meet the condition 
ANY means that the condition will be true if the operation is true for any of the values in the range.

SELECT column_name(s)
FROM table_name
WHERE column_name operator ANY
  (SELECT column_name
  FROM table_name
 ffmpeg -i $filename -c:a libopus -r:a 48000 -b:a 64k $PWD/$webm.opus
 WHERE condition); 

The ALL operator:
      returns a boolean value as a result
      returns TRUE if ALL of the subquery values meet the condition 
      is used with SELECT, WHERE and HAVING statements 
ALL means that the condition will be true only if the operation is true for all values in the range.
SELECT ALL column_name(s)
FROM table_name
WHERE condition; 



#INSERT INTO SELECT
The INSERT INTO SELECT statement copies data from one table and inserts it into another table.
INSERT INTO table2
SELECT * FROM table1
WHERE condition; 

INSERT INTO table2 (column1, column2, column3, ...)
SELECT column1, column2, column3, ...
FROM table1
WHERE condition; 



#CASE
The CASE statement goes through conditions and returns a value when the first condition is met (like an if-then-else statement). So, once a condition is true, it will stop reading and return the result. If no conditions are true, it returns the value in the ELSE clause. 
CASE
    WHEN condition1 THEN result1
    WHEN condition2 THEN result2
    WHEN conditionN THEN resultN
    ELSE result
END; 

The following SQL goes through conditions and returns a value when the first condition is met:
SELECT OrderID, Quantity,
CASE
    WHEN Quantity > 30 THEN 'The quantity is greater than 30'
    WHEN Quantity = 30 THEN 'The quantity is 30'
    ELSE 'The quantity is under 30'
END AS QuantityText
FROM OrderDetails; 



#OPERATORS

+ Add

- Subtract

* Multiply

/ Divide

% Modulo



& Bitwise AND
| Bitwise OR
^ Bitwise exclusive OR


= Equal to

> Greater than

< Less than

>= Greater than or equal to

<= Less than or equal to

<> Not equal to



+= Add equals
-= Subtract equals
*= Multiply equals
/= Divide equals
%= Modulo equals
&= Bitwise AND equals
^-= Bitwise exclusive equals
|*= Bitwise OR equals

ALL 
TRUE if all of the subquery values meet the condition

AND
TRUE if all the conditions separated by AND is TRUE

ANY
TRUE if any of the subquery values meet the condition

BETWEEN
TRUE if the operand is within the range of comparisons

EXISTS
TRUE if the subquery returns one or more records

IN
TRUE if the operand is equal to one of a list of expressions

LIKE
TRUE if the operand matches a pattern

NOT
Displays a record if the condition(s) is NOT TRUE

OR
TRUE if any of the conditions separated by OR is TRUE

SOME
TRUE if any of the subquery values meet the condition


